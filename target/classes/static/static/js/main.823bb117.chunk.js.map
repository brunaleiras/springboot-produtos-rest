{"version":3,"sources":["Components/Forms/AddEditForm.js","Components/Modals/Modal.js","Components/Tables/DataTable.js","App.js","serviceWorker.js","index.js"],"names":["AddEditForm","state","id","nome","quantidade","valor","onChange","e","setState","target","name","value","submitFormAdd","preventDefault","fetch","method","headers","body","JSON","stringify","then","response","json","item","Array","isArray","props","addItemToState","toggle","console","log","catch","err","submitFormEdit","updateState","this","Form","onSubmit","FormGroup","Label","for","Input","type","Button","React","Component","ModalForm","prevState","modal","closeBtn","className","onClick","label","buttonLabel","button","title","color","style","float","marginRight","Modal","isOpen","ModalHeader","close","ModalBody","DataTable","deleteItem","window","confirm","deleteItemFromState","items","map","key","scope","width","Table","responsive","hover","App","itemIndex","findIndex","data","newArray","slice","updatedItems","filter","getItems","Container","Row","Col","margin","filename","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.823bb117.chunk.js","sourcesContent":["import React from 'react';\nimport { Button, Form, FormGroup, Label, Input } from 'reactstrap';\n\nclass AddEditForm extends React.Component {\n\n    state = { id : 0, nome :'', quantidade:0, valor:0}\n\n    onChange = e => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n\n    submitFormAdd = e => {\n        e.preventDefault()\n        fetch('/produto/gravar', {\n            method: 'post',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                nome: this.state.nome,\n                quantidade: this.state.quantidade,\n                valor: this.state.valor\n            })\n        })\n            .then(response => response.json())\n            .then(item => {\n                if(Array.isArray(item)) {\n                    this.props.addItemToState(item[0])\n                    this.props.toggle()\n                } else {\n                    console.log('failure')\n                }\n            })\n            .catch(err => console.log(err))\n    }\n\n    submitFormEdit = e => {\n        e.preventDefault()\n        fetch('/produto/atualizar', {\n            method: 'put',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n                nome: this.state.nome,\n                quantidade: this.state.quantidade,\n                valor: this.state.valor\n            })\n        })\n            .then(response => response.json())\n            .then(item => {\n                if(Array.isArray(item)) {\n                    // console.log(item[0])\n                    this.props.updateState(item[0])\n                    this.props.toggle()\n                } else {\n                    console.log('failure')\n                }\n            })\n            .catch(err => console.log(err))\n    }\n\n    componentDidMount(){\n        // if item exists, populate the state with proper data\n        if(this.props.item){\n            const { nome, quantidade, valor } = this.props.item\n            this.setState({ nome, quantidade, valor })\n        }\n    }\n\n    render() {\n        return (\n            <Form onSubmit={this.props.item ? this.submitFormEdit : this.submitFormAdd}>\n            <FormGroup>\n            <Label for=\"first\">Nome</Label>\n        <Input type=\"text\" name=\"nome\" id=\"nome\" onChange={this.onChange} value={this.state.nome === null ? '' : this.state.nome} />\n        </FormGroup>\n        <FormGroup>\n        <Label for=\"last\">Quantidade</Label>\n        <Input type=\"text\" name=\"quantidade\" id=\"quantidade\" onChange={this.onChange} value={this.state.quantidade === null ? '' : this.state.quantidade}  />\n        </FormGroup>\n        <FormGroup>\n        <Label for=\"email\">Valor</Label>\n            <Input type=\"text\" name=\"valor\" id=\"valor\" onChange={this.onChange} value={this.state.valor === null ? '' : this.state.valor}  />\n        </FormGroup>\n\n        <Button>Submit</Button>\n        </Form>\n    );\n    }\n}\n\nexport default AddEditForm\n","import React, { Component } from 'react'\nimport { Button, Modal, ModalHeader, ModalBody } from 'reactstrap'\nimport AddEditForm from '../Forms/AddEditForm'\n\nclass ModalForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            modal: false\n        }\n    }\n\n    toggle = () => {\n        this.setState(prevState => ({\n            modal: !prevState.modal\n        }))\n    }\n\n    render() {\n        const closeBtn = <button className=\"close\" onClick={this.toggle}>&times;</button>\n\n        const label = this.props.buttonLabel\n\n        let button = ''\n        let title = ''\n\n        if(label === 'Editar'){\n            button = <Button\n            color=\"warning\"\n            onClick={this.toggle}\n            style={{float: \"left\", marginRight:\"10px\"}}>{label}\n        </Button>\n            title = 'Produto'\n        } else {\n            button = <Button\n            color=\"success\"\n            onClick={this.toggle}\n            style={{float: \"left\", marginRight:\"10px\"}}>{label}\n        </Button>\n            title = 'Adicionar Novo'\n        }\n\n\n        return (\n            <div>\n            {button}\n            <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\n            <ModalHeader toggle={this.toggle} close={closeBtn}>{title}</ModalHeader>\n            <ModalBody>\n            <AddEditForm\n        addItemToState={this.props.addItemToState}\n        updateState={this.props.updateState}\n        toggle={this.toggle}\n        item={this.props.item} />\n        </ModalBody>\n        </Modal>\n        </div>\n    )\n    }\n}\n\nexport default ModalForm","import React, { Component } from 'react'\nimport { Table, Button } from 'reactstrap';\nimport ModalForm from '../Modals/Modal'\n\nclass DataTable extends Component {\n\n    deleteItem = id => {\n        let confirmDelete = window.confirm('Tem certeza que deseja remover esse item?')\n        if(confirmDelete){\n            fetch('/produto', {\n                method: 'delete',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    id\n                })\n            })\n                .then(response => response.json())\n                .then(item => {\n                    this.props.deleteItemFromState(id)\n                })\n                .catch(err => console.log(err))\n        }\n\n    }\n\n    render() {\n//{\"id\":1,\"nome\":\"alcool em gel\",\"quantidade\":123.00,\"valor\":66.00}\n        const items = this.props.items.map(item => {\n            return (\n                <tr key={item.id}>\n                <th scope=\"row\">{item.id}</th>\n                <td>{item.nome}</td>\n                <td>{item.quantidade}</td>\n                <td>{item.valor}</td>\n                <td>\n                <div style={{width:\"110px\"}}>\n        <ModalForm buttonLabel=\"Editar\" item={item} updateState={this.props.updateState}/>\n            {' '}\n        <Button color=\"danger\" onClick={() => this.deleteItem(item.id)}>Remover</Button>\n            </div>\n            </td>\n            </tr>\n        )\n        })\n\n        return (\n            <Table responsive hover>\n        <thead>\n        <tr>\n        <th>ID</th>\n        <th>Nome</th>\n        <th>Quantidade</th>\n        <th>Valor</th>\n        <th>Ações</th>\n        </tr>\n        </thead>\n        <tbody>\n        {items}\n        </tbody>\n        </Table>\n    )\n    }\n}\n\nexport default DataTable","import React, { Component } from 'react'\nimport { Container, Row, Col } from 'reactstrap'\nimport ModalForm from './Components/Modals/Modal'\nimport DataTable from './Components/Tables/DataTable'\nimport { CSVLink } from \"react-csv\"\n\nclass App extends Component {\n  state = {\n    items: []\n  }\n\n  getItems(){\n    fetch('/produto')\n        .then(response => response.json())\n        .then(items => this.setState({items}))\n        .catch(err => console.log(err))\n  }\n\n  addItemToState = (item) => {\n    this.setState(prevState => ({\n      items: [...prevState.items, item]\n    }))\n  }\n\n  updateState = (item) => {\n    const itemIndex = this.state.items.findIndex(data => data.id === item.id)\n    const newArray = [\n      // destructure all items from beginning to the indexed item\n      ...this.state.items.slice(0, itemIndex),\n      // add the updated item to the array\n      item,\n      // add the rest of the items to the array from the index after the replaced item\n      ...this.state.items.slice(itemIndex + 1)\n    ]\n    this.setState({ items: newArray })\n  }\n\n  deleteItemFromState = (id) => {\n    const updatedItems = this.state.items.filter(item => item.id !== id)\n    this.setState({ items: updatedItems })\n  }\n\n  componentDidMount(){\n    this.getItems()\n  }\n\n  render() {\n    return (\n        <Container className=\"App\">\n        <Row>\n        <Col>\n        <h1 style={{margin: \"20px 0\"}}>CRUD Produtos - Bootstrap</h1>\n    </Col>\n    </Row>\n    <Row>\n    <Col>\n    <DataTable items={this.state.items} updateState={this.updateState} deleteItemFromState={this.deleteItemFromState} />\n    </Col>\n    </Row>\n    <Row>\n    <Col>\n    <CSVLink\n    filename={\"db.csv\"}\n    color=\"primary\"\n    style={{float: \"left\", marginRight: \"10px\"}}\n    className=\"btn btn-primary\"\n    data={this.state.items}>\n        Gerar CSV\n    </CSVLink>\n    <ModalForm buttonLabel=\"Adicionar Item\" addItemToState={this.addItemToState}/>\n    </Col>\n    </Row>\n    </Container>\n  )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}